import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import nltk
from nltk.corpus import stopwords

# Baixa os stopwords só se não estiverem instalados
try:
    nltk.data.find('corpora/stopwords')
except LookupError:
    nltk.download('stopwords')

# Carregar o dataset
df = pd.read_excel("Medicine_Details.xlsx")

# Remover duplicatas por nome do medicamento
df = df.drop_duplicates(subset='Medicine Name', keep='first').reset_index(drop=True)

# Função de recomendação
def recomendar_medicamentos(usuario_entrada, tipo='nome', top_n=5):
    stop_words = stopwords.words('portuguese') + stopwords.words('english')  # português + inglês
    tfidf = TfidfVectorizer(stop_words=stop_words, max_df=0.7, ngram_range=(1, 2))
    tfidf_matriz = tfidf.fit_transform(df['Uses'].fillna(''))

    if tipo == 'nome':
        try:
            idx = df[df['Medicine Name'].str.lower() == usuario_entrada.lower()].index[0]
            entrada_vetor = tfidf_matriz[idx]
        except IndexError:
            return "Medicamento não encontrado na base de dados."
    elif tipo == 'descricao':
        entrada_vetor = tfidf.transform([usuario_entrada])
        idx = None
    else:
        return "Tipo de entrada inválido. Use 'nome' ou 'descricao'."

    similaridades = cosine_similarity(entrada_vetor, tfidf_matriz).flatten()

    if idx is not None:
        indices_similares = [i for i in similaridades.argsort()[::-1] if similaridades[i] > 0.1 and i != idx][:top_n]
    else:
        indices_similares = [i for i in similaridades.argsort()[::-1] if similaridades[i] > 0.1][:top_n]

    recomendacoes = []
    for i in indices_similares:
        recomendacao = {
            'Medicamento': df.iloc[i]['Medicine Name'],
            'Composição': df.iloc[i]['Composition'],
            'Usos': df.iloc[i]['Uses'],
            'Similaridade': round(similaridades[i], 2)
        }
        recomendacoes.append(recomendacao)

    return recomendacoes

# Exemplo de uso
if __name__ == "__main__":
    entrada = input("Digite o nome do medicamento ou uma descrição: ")
    tipo = input("Buscar por 'nome' ou 'descricao'? ").strip().lower()
    resultado = recomendar_medicamentos(entrada, tipo=tipo)

    if isinstance(resultado, str):
        print(resultado)
    else:
        for rec in resultado:
            print(f"\nMedicamento: {rec['Medicamento']}\nComposição: {rec['Composição']}\nUsos: {rec['Usos']}\nSimilaridade: {rec['Similaridade']}")
